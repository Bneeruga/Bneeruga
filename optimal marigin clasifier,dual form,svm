{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "HW2_bharath_neeruganti",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyO/6giu0jsp/FffK82Nbj0e",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bneeruga/Bneeruga/blob/main/optimal%20marigin%20clasifier%2Cdual%20form%2Csvm\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jYwqHTFR_ht8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "600145cf-7810-4f23-fa80-6e0dfd6d86bf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Bias (b) : -0.6002426560740116\n",
            " training erorr : 0.0\n",
            " testing error : 2.6096033402922756\n"
          ]
        }
      ],
      "source": [
        "import cvxpy as cp\n",
        "from matplotlib import axis\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "\n",
        "mnist = tf.keras.datasets.mnist\n",
        "(train_images, train_lables),(test_images,test_lables) = mnist.load_data()\n",
        "index_train = np.where( (train_lables == 2) | (train_lables == 6))\n",
        "index_test = np.where( (test_lables == 6) | (test_lables == 6))\n",
        "\n",
        "train_images_26 = train_images[index_train]\n",
        "#flatenning\n",
        "train_images_26 = train_images_26.reshape((len(train_images_26), train_images_26[1].size)) \n",
        "train_lables_26 = train_lables[index_train].astype( 'int')\n",
        "\n",
        "test_images_26 = test_images[index_test]\n",
        "test_images_26 = test_images_26.reshape((len(test_images_26), test_images_26[1].size)) \n",
        "test_lables_26 = test_lables[index_test].astype( 'int')\n",
        "\n",
        "train_lables_26[np.where(train_lables_26 == 2)] = -1\n",
        "train_lables_26[np.where(train_lables_26 == 6)] = 1\n",
        "\n",
        "test_lables_26[np.where(test_lables_26 == 2)] = -1\n",
        "test_lables_26[np.where(test_lables_26 == 6)] = 1\n",
        "\n",
        "\n",
        "train_images_26 = train_images_26/255\n",
        "test_images_26 = test_images_26/255\n",
        "\n",
        "X_train = train_images_26[range(1000)]\n",
        "Y_train= train_lables_26[range(1000)]\n",
        "\n",
        "# Define and solve the CVXPY problem.\n",
        "\n",
        "row, col = X_train.shape\n",
        "w = cp.Variable(col)\n",
        "b = cp.Variable()\n",
        "\n",
        "objective = cp.Minimize(cp.sum_squares(w))\n",
        "constraints = [cp.multiply(Y_train, ( X_train @ w.T  + b)) >= 1 ]\n",
        "prob = cp.Problem(objective,constraints)\n",
        "prob.solve()\n",
        "\n",
        "print(f' Bias (b) : {b.value}')\n",
        "#print(prob.value)\n",
        "#print(np.linalg.norm(w.value))\n",
        "\n",
        "y_traing_pred = 0\n",
        "length = train_images_26.shape[0]\n",
        "for j in range(X_train.shape[0]):\n",
        "\n",
        " predicttrain = np.sign((np.dot(w.value,X_train[j]))+b.value)\n",
        " \n",
        " if predicttrain != train_lables_26[j]:\n",
        "   y_traing_pred +=1\n",
        "\n",
        "training_currect = (y_traing_pred/length)*100\n",
        "print(f' training erorr : {training_currect}')\n",
        "\n",
        "y_test_pred = 0\n",
        "length = test_images_26.shape[0]\n",
        "for j in range(test_images_26.shape[0]):\n",
        "\n",
        " predicttest = np.sign((np.dot(w.value,test_images_26[j]))+b.value)\n",
        " \n",
        " if predicttest != test_lables_26[j]:\n",
        "   y_test_pred +=1\n",
        "\n",
        "testining_currect = (y_test_pred/length)*100\n",
        "print(f' testing error : {testining_currect}')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cvxpy as cp\n",
        "from matplotlib import axis\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "\n",
        "mnist = tf.keras.datasets.mnist\n",
        "(train_images, train_lables),(test_images,test_lables) = mnist.load_data()\n",
        "index_train = np.where( (train_lables == 2) | (train_lables == 6))\n",
        "index_test = np.where( (test_lables == 6) | (test_lables == 6))\n",
        "\n",
        "train_images_26 = train_images[index_train]\n",
        "#flatenning\n",
        "train_images_26 = train_images_26.reshape((len(train_images_26), train_images_26[1].size)) \n",
        "train_lables_26 = train_lables[index_train].astype( 'int')\n",
        "\n",
        "test_images_26 = test_images[index_test]\n",
        "test_images_26 = test_images_26.reshape((len(test_images_26), test_images_26[1].size)) \n",
        "test_lables_26 = test_lables[index_test].astype( 'int')\n",
        "\n",
        "train_lables_26[np.where(train_lables_26 == 2)] = -1\n",
        "train_lables_26[np.where(train_lables_26 == 6)] = 1\n",
        "\n",
        "test_lables_26[np.where(test_lables_26 == 2)] = -1\n",
        "test_lables_26[np.where(test_lables_26 == 6)] = 1\n",
        "\n",
        "\n",
        "train_images_26 = train_images_26/255\n",
        "test_images_26 = test_images_26/255\n",
        "\n",
        "X_train = train_images_26[range(1000)]\n",
        "Y_train= train_lables_26[range(1000)]\n",
        "\n",
        "# Define and solve the CVXPY problem.\n",
        "\n",
        "row, col = X_train.shape\n",
        "one = np.ones(1000)\n",
        "alpha = cp.Variable(row)\n",
        "x = (cp.multiply(Y_train, alpha ))\n",
        "xt = x.T\n",
        "p = X_train @ X_train.T\n",
        "\n",
        "prob = cp.Problem(cp.Minimize( (1/2)*cp.quad_form(x, p)- one.T @ alpha) ,\n",
        "                               [ alpha >= 0, alpha.T @ Y_train == 0])\n",
        "                                    \n",
        "prob.solve()\n",
        "\n",
        "# Print result.\n",
        "print(\"\\nThe optimal value is\", prob.value)\n",
        "\n",
        "omega = np.zeros(col)\n",
        "for i in range(row):\n",
        "  omega = omega + ( np.inner(np.inner(alpha.value[i], Y_train[i]), X_train[i] ))\n",
        "\n",
        "max = x = -float('inf')\n",
        "min = 1000\n",
        "\n",
        "for j in range(row):\n",
        "  if(Y_train[j] == -1):\n",
        "      sum_max = np.inner(omega.T, X_train[j])\n",
        "      if(sum_max > max):\n",
        "        max = sum_max\n",
        "       \n",
        "\n",
        "  else :\n",
        "      sum_min = np.inner(omega.T, X_train[j])\n",
        "      if( sum_min < min ):   \n",
        "        min = sum_min\n",
        "       \n",
        "\n",
        "b = -(min + max)/2\n",
        "print(f' Bias (b) : {b}')\n",
        "\n",
        "y_traing_pred = 0\n",
        "length = train_images_26.shape[0]\n",
        "for k in range(X_train.shape[0]):\n",
        "\n",
        " predicttrain = np.sign((np.dot(omega,X_train[k]))+b)\n",
        " if predicttrain != train_lables_26[k]:\n",
        "   y_traing_pred +=1\n",
        "\n",
        "training_currect = (y_traing_pred/length)*100\n",
        "print(f' training erorr : {training_currect}')\n",
        "\n",
        "\n",
        "y_test_pred = 0\n",
        "length = test_images_26.shape[0]\n",
        "for p in range(test_images_26.shape[0]):\n",
        "\n",
        " predicttest = np.sign((np.dot(omega,test_images_26[p]))+b)\n",
        " \n",
        " if predicttest != test_lables_26[p]:\n",
        "   y_test_pred +=1\n",
        "\n",
        "testining_currect = (y_test_pred/length)*100\n",
        "print(f' testing error : {testining_currect}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "femNtcWQcOTZ",
        "outputId": "2519854c-79e7-48c7-a0b9-b520ca0864c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "The optimal value is -3.603991970589853\n",
            " Bias (b) : -0.600242656300894\n",
            " training erorr : 0.0\n",
            " testing error : 2.6096033402922756\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cvxpy as cp\n",
        "from matplotlib import axis\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "\n",
        "mnist = tf.keras.datasets.mnist\n",
        "(train_images, train_lables),(test_images,test_lables) = mnist.load_data()\n",
        "index_train = np.where( (train_lables == 2) | (train_lables == 6))\n",
        "index_test = np.where( (test_lables == 6) | (test_lables == 6))\n",
        "\n",
        "train_images_26 = train_images[index_train]\n",
        "#flatenning\n",
        "train_images_26 = train_images_26.reshape((len(train_images_26), train_images_26[1].size)) \n",
        "train_lables_26 = train_lables[index_train].astype( 'int')\n",
        "\n",
        "test_images_26 = test_images[index_test]\n",
        "test_images_26 = test_images_26.reshape((len(test_images_26), test_images_26[1].size)) \n",
        "test_lables_26 = test_lables[index_test].astype( 'int')\n",
        "\n",
        "train_lables_26[np.where(train_lables_26 == 2)] = -1\n",
        "train_lables_26[np.where(train_lables_26 == 6)] = 1\n",
        "\n",
        "test_lables_26[np.where(test_lables_26 == 2)] = -1\n",
        "test_lables_26[np.where(test_lables_26 == 6)] = 1\n",
        "\n",
        "\n",
        "train_images_26 = train_images_26/255\n",
        "test_images_26 = test_images_26/255\n",
        "\n",
        "X_train = train_images_26[range(1000)]\n",
        "Y_train= train_lables_26[range(1000)]\n",
        "\n",
        "# Define and solve the CVXPY problem.\n",
        "row, col = X_train.shape\n",
        "sigma = 1\n",
        "cols = 2\n",
        "size = row*row\n",
        " \n",
        "kg =  np.array([0]*size).reshape(row,row)\n",
        "\n",
        "for i in range(row):\n",
        "  for j in range(row):\n",
        "    kg[i,j] = np.exp(-((np.linalg.norm(X_train[i] - X_train[j],2)**2)/(2*sigma**2)))\n",
        "  \n",
        "one = np.ones(1000)\n",
        "alpha = cp.Variable(row)\n",
        "x = (cp.multiply(Y_train, alpha ))\n",
        "xt = x.T\n",
        "#p = X_train @ X_train.T\n",
        "\n",
        "prob = cp.Problem(cp.Minimize( (1/2)*cp.quad_form(x, kg)- one.T @ alpha) ,\n",
        "                               [ alpha >= 0, alpha.T @ Y_train == 0])\n",
        "                                    \n",
        "prob.solve()\n",
        "\n",
        "# Print result.\n",
        "print(\"\\nThe optimal value is\", prob.value)\n",
        "\n",
        "omegaPhi = np.zeros(row)\n",
        "for i in range(row):\n",
        "  omegaPhi = omegaPhi + ( np.inner(np.inner(alpha.value[i], Y_train[i]),kg[i]))\n",
        "\n",
        "max = x = -float('inf')\n",
        "min = 1000\n",
        "\n",
        "for j in range(row):\n",
        "  if(Y_train[j] == -1):\n",
        "      if(omegaPhi[j] > max):\n",
        "        max = omegaPhi[j]      \n",
        "  else :  \n",
        "      if( omegaPhi[j] < min ):   \n",
        "        min = omegaPhi[j]\n",
        "       \n",
        "b = -(min + max)/2\n",
        "print(f' Bias (b) : {b}')\n",
        "\n",
        "\n",
        "y_traing_pred = 0\n",
        "length = train_images_26.shape[0]\n",
        "for k in range(X_train.shape[0]):\n",
        "\n",
        " predicttrain = np.sign(omegaPhi[k]+b)\n",
        " if predicttrain != train_lables_26[k]:\n",
        "   y_traing_pred +=1\n",
        "\n",
        "training_currect = (y_traing_pred/length)*100\n",
        "print(f' training erorr : {training_currect}')\n",
        "\n",
        "\n",
        "y_test_pred = 0\n",
        "length = test_images_26.shape[0]\n",
        "for p in range(test_images_26.shape[0]):\n",
        "\n",
        " predicttest = np.sign(omegaPhi[p]+b)\n",
        " \n",
        " if predicttest != test_lables_26[p]:\n",
        "   y_test_pred +=1\n",
        "\n",
        "testining_currect = (y_test_pred/length)*100\n",
        "print(f' testing error : {testining_currect}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Db8G9A7bi77",
        "outputId": "38f11822-52b8-4f05-bd76-b6fd74810bc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "The optimal value is -499.83799999999405\n",
            " Bias (b) : 0.01799999999999985\n",
            " training erorr : 0.0\n",
            " testing error : 49.478079331941544\n"
          ]
        }
      ]
    }
  ]
}